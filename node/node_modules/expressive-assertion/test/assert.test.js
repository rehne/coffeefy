/* global describe, it */

'use strict';

var assert = require('../lib/assert.js');
var nodeAssert = require('assert');

describe('assert()', function () {
    it('returns without throwing an assertion error', function () {
        assert(function () {
            return true;
        });

        assert(function () {
            return true;
        }, function () {
            return true;
        });
    });

    it('throws an assertion error with an expressive message', function () {
        var expected = /^AssertionError: assert\(function \(\) \{ (?:"use strict"; )?return false; \}\)$/;

        nodeAssert.throws(function () {
            assert(function () {
                return false;
            });
        }, expected);

        nodeAssert.throws(function () {
            assert(function () {
                return false;
            }, function () {
                return false;
            });
        }, expected);

        nodeAssert.throws(function () {
            assert(function () {
                return false;
            }, function () {
                return true;
            });
        }, expected);

        nodeAssert.throws(function () {
            assert(function () {
                return true;
            }, function () {
                return false;
            });
        }, expected);
    });
});

describe('assert.throws()', function () {
    it('returns without throwing an assertion error', function () {
        assert.throws(function () {
            throw 'foo';
        });

        assert.throws(function () {
            throw 'foo';
        }, function (exception) {
            return exception === 'foo';
        });

        assert.throws(function () {
            throw 'foo';
        }, function (exception) {
            return exception === 'foo';
        }, function (exception) {
            return exception !== 'bar';
        });

        assert.throws(function () {
            throw 'foo';
        }, function (exception) {
            return exception !== 'bar';
        }, function (exception) {
            return exception === 'foo';
        });
    });

    it('throws an assertion error with an expressive message', function () {
        var expected = /^AssertionError: assert\(function \(exception\) \{ (?:"use strict"; )?return exception !== 'foo'; \}\)$/;

        nodeAssert.throws(function () {
            assert.throws(function () {
                throw 'foo';
            }, function (exception) {
                return exception !== 'foo';
            });
        }, expected);

        nodeAssert.throws(function () {
            assert.throws(function () {
                throw 'foo';
            }, function (exception) {
                return exception !== 'foo';
            }, function (exception) {
                return exception === 'foo';
            });
        }, expected);

        nodeAssert.throws(function () {
            assert.throws(function () {
                throw 'foo';
            }, function (exception) {
                return exception === 'foo';
            }, function (exception) {
                return exception !== 'foo';
            });
        }, expected);
    });

    it('throws an assertion error if the given block does not throw an exception', function () {
        var expected = /^AssertionError: Missing expected exception\.$/;

        nodeAssert.throws(function () {
            assert.throws(function () {
                return 'foo';
            });
        }, expected);

        nodeAssert.throws(function () {
            assert.throws(function () {
                return 'foo';
            }, function (exception) {
                return exception === 'foo';
            });
        }, expected);

        nodeAssert.throws(function () {
            assert.throws(function () {
                return 'foo';
            }, function (exception) {
                return exception !== 'foo';
            });
        }, expected);
    });
});
