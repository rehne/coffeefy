'use strict';

var arraySlice = Array.prototype.slice;
var functionToString = Function.prototype.toString;

var reduceWhitespace = function (string) {
    return string.match(new RegExp('[^\r\n]+', 'g')).map(function (line) {
        return line.trim();
    }).join(' ');
};

var throwAssertionError = function (predicate, message, stackStartFunction) {
    var error = new Error(message || ('assert(' + reduceWhitespace(functionToString.call(predicate)) + ')'));

    error.name = 'AssertionError';

    if (typeof Error.captureStackTrace === 'function') {
        Error.captureStackTrace(error, stackStartFunction);
    }

    throw error;
};

var assert = function assert() {
    arraySlice.call(arguments, 0).forEach(function (predicate) {
        if (!predicate()) {
            throwAssertionError(predicate, null, assert);
        }
    });
};

assert.throws = function throws(block) {
    var thrown = false;

    try {
        block();
    } catch (exception) {
        thrown = true;

        arraySlice.call(arguments, 1).forEach(function (predicate) {
            if (!predicate(exception)) {
                throwAssertionError(predicate, null, throws);
            }
        });
    }

    if (!thrown) {
        throwAssertionError(null, 'Missing expected exception.', throws);
    }
};

module.exports = assert;
