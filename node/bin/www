#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app     = require('../app');
var debug   = require('debug')('coffeefy:server');
var config  = require('../public/config.json');
var http    = require('http');
var mqtt    = require('mqtt');
var pythonshell = require('python-shell');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var client  = mqtt.connect('mptt://' + config.address + '/');

client.on('connect', function () {
  client.subscribe('coffeefy/messages');
  client.publish('coffeefy/messages', '[   mqtt] client is listening to mqtt://' + config.address + '/');
});

client.on('message', function (topic, message) {
  // message is Buffer
  console.log(message.toString());
});

//   readUltrasonicSensorPython();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('[Express] ' + bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('[Express] ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('[Express] Server listening on port ' + addr.port + '.');
}
